#!/usr/bin/perl

use strict;
use LWP::UserAgent;
use HTTP::Request;

use MIME::QuotedPrint qw(encode_qp);
use MIME::Base64;
use Encode;
use MIME::Lite;
use Net::SMTP;

sub encode_mailheader{
    my ($txt, $sp) = @_;
    $sp ||= 18;
    Encode::_utf8_off($txt);
    join("", map {'=?UTF-8?B?'.encode_base64(substr($txt, $_*$sp, $sp),'')."?=\n"} (0..int(length($txt)/$sp)))
}
sub send_mail_attach{
    my %eml = @_;
    my (%hdr);
    $eml{'return-path'} ||= $eml{from};
    for (qw{To Cc Bcc From Return-path Reply-To}) { # can be scalar or hashref {email1=>name1, email2=>name2, email3=>undef...}
        my $v = $eml{lc($_)};
        next unless $v;
        $v = join (',', map {$$v{$_}?encode_mailheader($$v{$_}, 200)." <$_>":$_} keys %$v) if ref $v; #unicode name support
        $hdr{$_} = $v;
    }
    $hdr{Subject} = $eml{_no_encode_subj} ? $eml{subject} : encode_mailheader($eml{subject},200);
    $hdr{"Message-ID"} = $eml{"Message-ID"} if $eml{"Message-ID"};
    $hdr{"Thread-Index:"} = $eml{"Thread-Index"} if $eml{"Thread-Index"};
    $hdr{"X-Thread-Index"} = $eml{"Thread-Index"} if $eml{"Thread-Index"};
    $hdr{$_} = $eml{hdr}{$_} for keys %{$eml{hdr} || {}};
    $eml{content_type} ||= 'text/plain';

    if($eml{convert} eq 'support'){
        if (length($eml{message})){
            $hdr{Type} = ($eml{content_type} || 'text/plain').';charset="utf-8"';
            $hdr{Data} = encode("UTF-8", $eml{message});
            my $msg = MIME::Lite->new(%hdr);
            $msg->attr('Content-Transfer-Encoding', '8bit');
            $msg->send('sendmail', SetSender=>1); #task259 by Dimik, return-path problem
        }
        return;
    }

    if($eml{content_type} eq 'text/plain' and !$eml{files}){
        if (length($eml{message})){
            $hdr{Type} = ($eml{content_type} || 'text/plain').';charset="utf-8"';
            $hdr{Data} = encode_qp(encode("UTF-8", $eml{message}));
#            $hdr{'Content-Transfer-Encoding'}='quoted-printable';

            my $msg = MIME::Lite->new(%hdr);
            $msg->attr('Content-Transfer-Encoding', 'quoted-printable'); #Vlad - Lite alert
            $msg->send('sendmail', SetSender=>1); #task259 by Dimik, return-path problem
        }
        return;
    }

    $hdr{Type} = 'multipart/'.($eml{multipart}?$eml{multipart}:'related');
    my $msg = MIME::Lite->new(%hdr);

    $msg->attach(
        Type    => ($eml{content_type} || 'text/plain').';charset="utf-8"',
        'Content-Transfer-Encoding' => 'quoted-printable',
        Data    => encode_qp(encode("UTF-8", $eml{message})),
    ) if length($eml{message});

    for (@{$eml{files}}) {
        Encode::_utf8_off($$_{data});
        $msg->attach(
            Type        => ($$_{ctype} || 'image/gif'),
            Encoding    => 'base64',
            Data        => $$_{data},
            Disposition => 'attachment',
            Id          => $$_{id},
            Filename    => $$_{name}
        );
    }
    
    #$msg->send("sendmail", Sendmail=>"sudo", BaseArgs=>["/usr/sbin/sendmail", "-t", "-oi", "-oem"], SetSender=>1);
    $msg->send('smtp', 'x217.edss.ee', NoAuth => 1);
};

my $mail = join('', <STDIN>);

my $req = HTTP::Request->new(POST=>$ARGV[0]);
$req->content_type('application/octet-stream');
$req->content($mail);

open (MYFILE, '>/tmp/mail.eml');
print MYFILE $req->content;
close (MYFILE); 

my $resp = LWP::UserAgent->new->request($req);
#die if !$resp->is_success;
if ($resp->is_success) {
    1;
 } else {
    #todo send_mail_attach ... $mail;
    send_mail_attach(
        to            => 'help@exchange.edss.ee, appdep@exchange.edss.ee',
        from          => 'intra@cone.ee',
        content_type  => 'text/plain',
        charset       => 'utf8',
        cc            => '',
        subject       => 'Mail problem',
        message             => 'See attach.',
        multipart         => 'mixed',
        files         => [{   name => 'mail.eml', 
                              part => 1, 
                              id   => 'mail.eml', 
                              data => $mail,
                              ctype => 'application/octet-stream'
                        }],
    );
    
    print $resp->content;
    #die;
}
                                                                                                                                                                                                                                                                               
1;    