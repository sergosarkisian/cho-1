CREATE DATABASE exim;
CREATE USER exim WITH PASSWORD 'exim';
GRANT ALL PRIVILEGES ON DATABASE "exim" to exim;


CREATE TABLE accounts
(
  id serial NOT NULL,
  username text NOT NULL,
  password text NOT NULL DEFAULT '200820e3227815ed1756a6b531e7e0d2'::text,
  CONSTRAINT accounts_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE accounts
  OWNER TO exim;


CREATE TABLE domains
(
  id serial NOT NULL,
  name text NOT NULL,
  type text NOT NULL,
  rcv_from text NOT NULL DEFAULT 'all'::text,
  CONSTRAINT domains_id PRIMARY KEY (id),
  CONSTRAINT domains_name_key UNIQUE (name)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE domains
  OWNER TO exim;

  

CREATE TABLE router
(
  id serial NOT NULL,
  src text NOT NULL,
  from_domain integer NOT NULL,
  from_user text NOT NULL,
  to_domain integer NOT NULL,
  to_user text NOT NULL,
  transport text NOT NULL,
  inactive boolean DEFAULT false,
  CONSTRAINT router_id PRIMARY KEY (id),
  CONSTRAINT router_from_domain_fkey FOREIGN KEY (from_domain)
      REFERENCES domains (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION,
  CONSTRAINT router_to_domain_fkey FOREIGN KEY (to_domain)
      REFERENCES domains (id) MATCH SIMPLE
      ON UPDATE NO ACTION ON DELETE NO ACTION
)
WITH (
  OIDS=FALSE
);
ALTER TABLE router
  OWNER TO exim; 


-- Table: relay_from

-- DROP TABLE relay_from;

CREATE TABLE relay_from
(
  id serial NOT NULL,
  src text NOT NULL,
  ip text NOT NULL,
  CONSTRAINT relay_from_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE relay_from
  OWNER TO exim;

  

-- Table: accesslists

-- DROP TABLE accesslists;

CREATE TABLE accesslists
(
  id serial NOT NULL,
  src text NOT NULL,
  ip text NOT NULL,
  hdr_from text NOT NULL,
  type text NOT NULL,
  CONSTRAINT accesslists_pkey PRIMARY KEY (id)
)
WITH (
  OIDS=FALSE
);
ALTER TABLE accesslists
  OWNER TO exim;

CREATE UNIQUE INDEX accesslists_unique
  ON accesslists
  USING btree
  (src COLLATE pg_catalog."default", ip COLLATE pg_catalog."default", hdr_from COLLATE pg_catalog."default", type COLLATE pg_catalog."default");


CREATE TABLE greylist (
    id serial NOT NULL,
    relay_ip character varying(20),
    sender_type character varying(6) DEFAULT 'NORMAL'::character varying NOT NULL,
    sender character varying(150),
    recipient character varying(150),
    block_expires timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    record_expires timestamp without time zone DEFAULT '9999-12-31 23:59:59'::timestamp without time zone NOT NULL,
    create_time timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    "type" character varying(6) DEFAULT 'MANUAL'::character varying NOT NULL,
    passcount bigint DEFAULT 0::bigint NOT NULL,
    last_pass timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    blockcount bigint DEFAULT 0::bigint NOT NULL,
    last_block timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    CONSTRAINT greylist_sender_type_check CHECK ((((sender_type)::text = 'NORMAL'::text) OR ((sender_type)::text = 'BOUNCE'::text))),
    CONSTRAINT greylist_type_check CHECK (((("type")::text = 'AUTO'::text) OR (("type")::text = 'MANUAL'::text)))
);
--
-- Only for debug (optional)
--
CREATE TABLE greylist_log (
    id serial NOT NULL,
    listid bigint DEFAULT 0::bigint NOT NULL,
    "timestamp" timestamp without time zone DEFAULT '0001-01-01 00:00:00'::timestamp without time zone NOT NULL,
    kind character varying(8) DEFAULT 'deferred'::character varying NOT NULL,
    CONSTRAINT greylist_log_kind_check CHECK ((((kind)::text = 'deferred'::text) OR ((kind)::text = 'accepted'::text)))
);