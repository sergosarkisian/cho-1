#!/bin/bash
export PATH="${BINDIR}:${SBINDIR}:${LIBEXEC}:${PRIVATE_BINDIR}:/sbin:/bin:/usr/bin:/usr/sbin:$PATH"
export LANG="POSIX"

###DEFAULTS
#ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow vlannet "priority=30001 action=drop"
###
#add-flow - add single flow
#add-flows - add single/multiple flows fromn file
#mod-flows - mod flows on mask criteria
#replace-flows - diff switch & file flows, delete non-intersect; diff in {actions, cookie, or timeouts} -> applied

###  // ATOMS TASKS \\  ###

atom_tasks() {
    unset atom_store
    declare -A atom_store
    unset atom_name
    atom_name=$1   
    unset atom_input_serialised
    atom_input_serialised=$2
    logger -t vif-openflow  "Status: Input, ACT: atom_tasks, ${atom_store[command]} atom $atom_name , RULE: ovs-openflow, DATA: $atom_input_serialised" 


    arr=(${atom_input_serialised//---/ }) 
    for pairs in ${arr[*]}; do
        pre_parse=(${pairs//::/ })
        atom_store[${pre_parse[0]}]=${pre_parse[1]}
    done

    if [[ ${atom_store[port_type]} == "ext" ]]; then
		vlan=${atom_store[cookie]}		
	else
		vlan="0xffff"	
    fi

    case "$atom_name" in

        unsecure_all)
        case "${atom_store[command]}" in
            online|add)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (allow all packets) , RULE: ovs-openflow, DATA: $atom_input_serialised" 
                #DEFAULT - DROP
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} priority=31000 action=normal"
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (allow all packets) , RULE: ovs-openflow, DATA: $atom_input_serialised" 
                
            ;;
            offline)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (del flows from port) , RULE: ovs-openflow, DATA: $atom_input_serialised"             
                ovs-ofctl --verbose=syslog,dbg del-flows ${atom_store[switch]} in_port=${atom_store[port]}
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (del flows from port) , RULE: ovs-openflow, DATA: $atom_input_serialised"                             
            ;;
        esac
        ;;    
    
        unsecure)
        case "${atom_store[command]}" in
            online|add)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (allow all packets) , RULE: ovs-openflow, DATA: $atom_input_serialised" 
                #DEFAULT - DROP
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 action=normal"
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (allow all packets) , RULE: ovs-openflow, DATA: $atom_input_serialised" 
                
            ;;
            offline)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (del flows from port) , RULE: ovs-openflow, DATA: $atom_input_serialised"             
                ovs-ofctl --verbose=syslog,dbg del-flows ${atom_store[switch]} in_port=${atom_store[port]}
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (del flows from port) , RULE: ovs-openflow, DATA: $atom_input_serialised"                             
            ;;
        esac
        ;;
        

        initial)
        case "${atom_store[command]}" in
            online|add)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (drop all packets) , RULE: ovs-openflow, DATA: $atom_input_serialised" 
                #DEFAULT - DROP
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=30999 action=drop"
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (drop all packets) , RULE: ovs-openflow, DATA: $atom_input_serialised"                 
            ;;
            offline)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (del flows from port) , RULE: ovs-openflow, DATA: $atom_input_serialised"             
                ovs-ofctl --verbose=syslog,dbg del-flows ${atom_store[switch]} in_port=${atom_store[port]}
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (del flows from port) , RULE: ovs-openflow, DATA: $atom_input_serialised"                                             
            ;;
        esac
        ;;

        aspoof)
        case "${atom_store[command]}" in
            online|add)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (MAC/IP antispoofing) , RULE: ovs-openflow, DATA: $atom_input_serialised"             

                #TCP, to cookie network from VM mac,ip
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0800 dl_src=${atom_store[mac]} nw_src=${atom_store[ip]} action=normal"
                #ARP, to cookie network from VM mac,ip
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0806 dl_src=${atom_store[mac]} nw_src=${atom_store[ip]} action=normal"
                #TCP, from cookie network to VM mac,ip
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0800 dl_dst=${atom_store[mac]} nw_dst=${atom_store[ip]} action=normal"
                #ARP, from cookie network to VM mac,ip
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0806 dl_dst=${atom_store[mac]} nw_dst=${atom_store[ip]} action=normal"
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (MAC/IP antispoofing) , RULE: ovs-openflow, DATA: $atom_input_serialised"                             
            ;;
            offline)
                logger -t vif-openflow  "DEL - aspoof - no rules to delete ->> $atom_input_serialised"
            ;;
        esac
        ;;

        bcast)
        case "${atom_store[command]}" in
            online|add)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (allow broadcasts) , RULE: ovs-openflow, DATA: $atom_input_serialised"                         
                #ENABLE broadcasts
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0806 nw_dst=${atom_store[ip]} action=normal"
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0806 dl_src=${atom_store[mac]} nw_src=${atom_store[ip]} dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 action=normal"
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0800 dl_src=${atom_store[mac]} nw_src=${atom_store[ip]} dl_dst=01:00:00:00:00:00/01:00:00:00:00:00 action=normal"
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0800 dl_src=${atom_store[mac]} nw_src=${atom_store[ip]} nw_dst=${atom_store[bcast]} action=normal"
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0800 dl_src=${atom_store[mac]} nw_src=${atom_store[ip]} nw_dst=255.255.255.255 action=normal"
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (allow broadcasts) , RULE: ovs-openflow, DATA: $atom_input_serialised"                         
            ;;
            offline)
                logger -t vif-openflow  "DEL - bcast - no rules to delete  ->> $atom_input_serialised"
            ;;
        esac
        ;;

        nat)
        case "${atom_store[command]}" in
            online|add)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (allow nat-like behaviour) , RULE: ovs-openflow, DATA: $atom_input_serialised"                         
                #TCP, to cookie network from VM mac,ip
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0800 dl_src=${atom_store[mac]} action=normal"
                #ARP, to cookie network from VM mac,ip
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0806 dl_src=${atom_store[mac]} action=normal"
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (allow nat-like behaviour) , RULE: ovs-openflow, DATA: $atom_input_serialised"                         

            ;;
            offline)
                logger -t vif-openflow  "DEL - nat - no rules to delete  ->> $atom_input_serialised"
            ;;
        esac
        ;;

        dhcpserver)
        case "${atom_store[command]}" in
            online|add)
                logger -t vif-openflow  "Status: Ready to, ACT: ${atom_store[command]} atom $atom_name (allow dhcp response) , RULE: ovs-openflow, DATA: $atom_input_serialised"                                     
                ovs-ofctl --protocols=OpenFlow15 --verbose=syslog,dbg add-flow ${atom_store[switch]} "in_port=${atom_store[port]} dl_vlan=$vlan priority=31000 cookie=${atom_store[cookie]} dl_type=0x0800 dl_src=${atom_store[mac]} nw_src=${atom_store[ip]} udp,tp_dst=68 action=normal"
                logger -t vif-openflow  "Status: Done, ACT: ${atom_store[command]} atom $atom_name (allow dhcp response) , RULE: ovs-openflow, DATA: $atom_input_serialised"                                     

            ;;
            offline)
                logger -t vif-openflow  "DEL - dhcpserver - no rules to delete  ->> $atom_input_serialised"
            ;;
        esac
        ;;
        *)
        logger -t vif-openflow "ADD ATOM FAILED ->> $atom_input_serialised"
        exit 1
        ;;
    esac

}
###  \\ ATOMS TASKS //  ###


###  // RUN TO ATOMS \\  ###

run_atoms() {
    unset store
    declare -A store
    unset input_serialised    
    input_serialised=$1
    logger -t vif-openflow  "Status: input, ACT: run_atoms , RULE: ovs-openflow, DATA: $input_serialised"                                     

    arr=(${input_serialised//---/ }) 
    for pairs in ${arr[*]}; do
        pre_parse=(${pairs//::/ })
        store[${pre_parse[0]}]=${pre_parse[1]}
    done
    
    logger -t vif-openflow  "Status: input, ACT: atoms are: ${store[atoms]} type ${store[type]}, RULE: ovs-openflow"                       
    
    
    atoms=(${store[atoms]//++atoms++/ }) 


    for atom in ${atoms[*]}; do
    
        logger -t vif-openflow  "Status: Ready to, ACT: run_atoms - atom $atom type ${store[type]}, RULE: ovs-openflow, DATA: $input_serialised"                                     
        atom_tasks "$atom" "$input_serialised"
        logger -t vif-openflow  "Status: Done, ACT: run_atoms - atom $atom type ${store[type]}, RULE: ovs-openflow, DATA: $input_serialised"                                                     
                
        case "${store[type]}" in
            ext)
            
                store[ext_port]=`ovs-vsctl find interface name="${store[ext_if]}"|grep ofport." "|awk  '{print $3}'`

                if [[ ${store[command]}  == "offline" ]]; then
                    logger -t vif-openflow  "Status: Ready to, ACT: run_atoms - atom $atom type ${store[type]} - DEL from ovs_switch=${store[switch]}  ext_port=${store[ext_port]}:  IPv4 ${store[ip]} mac ${store[mac]} , RULE: ovs-openflow, DATA: $input_serialised"                                                         
                    ovs-ofctl --verbose=syslog,dbg del-flows ${store[switch]}  dl_type=0x0800,nw_src=${store[ip]},in_port=${store[ext_port]}
                    ovs-ofctl --verbose=syslog,dbg del-flows ${store[switch]}  dl_type=0x0800,nw_dst=${store[ip]},in_port=${store[ext_port]}
                    ovs-ofctl --verbose=syslog,dbg del-flows ${store[switch]}  dl_type=0x0806,dl_src=${store[mac]},in_port=${store[ext_port]}
                    ovs-ofctl --verbose=syslog,dbg del-flows ${store[switch]}  dl_type=0x0806,dl_dst=${store[mac]},in_port=${store[ext_port]}     
                    ovs-ofctl --verbose=syslog,dbg del-flows ${store[switch]}  dl_type=0x0806,arp_tpa=${store[ip]},in_port=${store[ext_port]}     
                    
                    
                    logger -t vif-openflow  "Status: Done, ACT: run_atoms - atom $atom type ${store[type]} - DEL from ovs_switch=${store[switch]}  ext_port=${store[ext_port]}:  IPv4 ${store[ip]} mac ${store[mac]} , RULE: ovs-openflow, DATA: $input_serialised"                                                                             
                else
                    store[port]=${store[ext_port]}
                    store[port_type]="ext"
                    store[port_internal]=${atom_store[port]}                    
                    unset store_serialised
                    for pairs in ${!store[@]}; do store_serialised+="$pairs::${store[$pairs]}---"; done 
                    store_serialised=${store_serialised:0:-3}                
                    logger -t vif-openflow  "Status: Ready to, ACT: run_atoms - atom $atom type ${store[type]} - ADD ${store[port]} to EXT IF ${store[ext_port]} , RULE: ovs-openflow, DATA: $input_serialised"                                                         
                    atom_tasks "$atom" "$store_serialised"
                    logger -t vif-openflow  "Status: Done, ACT: run_atoms - atom $atom type ${store[type]} - ADD ${store[port]} to EXT IF ${store[ext_port]} , RULE: ovs-openflow, DATA: $input_serialised"                                                         
                    
                fi
            ;;
            *)
                logger -t vif-openflow "run_atoms -> atom_tasks ${store[type]}  doesn't need any special rules"        
            ;;
        esac
        
    done
    
    logger -t vif-openflow "Status: ALL Done,  ACT: All atoms, RULE: ovs-openflow"                
    
}

###  \\ RUN TO ATOMS //  ###

unset store
declare -A store
unset input_serialised
input_serialised=$1
logger -t vif-openflow  "Status: input, ACT: tasks , RULE: ovs-openflow, DATA: $input_serialised"                                     

arr=(${input_serialised//---/ }) 
for pairs in ${arr[*]}; do
    pre_parse=(${pairs//::/ })
    store[${pre_parse[0]}]=${pre_parse[1]}
done


#ARRAYS
if [[ ${store[access]} ]]; then
    access_array=(${access//--/ })
else
    access_array=("127.0.0.1" "127.0.0.2")
fi

#
logger -t vif-openflow  "Status: input, ACT: type is ${store[type]}, policy is ${store[policy]}"                                     

###  // MAIN RUN \\  ###

##atoms - initial, aspoof, bcast, nat, dhcpserver
case "${store[policy]}" in
	unsecure_all)
       atoms=("unsecure_all")
    ;;
	unsecure)
       atoms=("unsecure")
    ;;
    common)
       atoms=("initial" "aspoof" "bcast")
    ;;    
    nat)
       atoms=("initial" "aspoof" "bcast" "nat")
    ;;
    aliases)
       atoms=("initial" "aspoof" "bcast")
        store[ip]="${store[ip]}/${store[netmask]}"
    ;;
    natalia)
       atoms=("initial" "aspoof" "bcast" "nat")
        store[ip]="${store[ip]}/${store[netmask]}"
    ;;
    dummy)
       atoms=("initial")
    ;;    
    TAGGED)
       atoms=("unsecure")
        store[ip]="0.0.0.0/32"
        store[bcast]="0.0.0.0"
        store[cookie]="10000"
    ;;
    *)
        exit 1
    ;;
esac

unset atoms_serialised
for pairs in ${atoms[@]}; do atoms_serialised+="$pairs++atoms++"; done 
store[atoms]=${atoms_serialised:0:-9}

unset store_serialised
for pairs in ${!store[@]}; do store_serialised+="$pairs::${store[$pairs]}---"; done 
store_serialised=${store_serialised:0:-3}

logger -t vif-openflow  "Status: Ready to, ACT: run_atoms , RULE: ovs-openflow, DATA: $store_serialised"                                     
run_atoms "$store_serialised"
logger -t vif-openflow  "Status: Done, ACT: run_atoms , RULE: ovs-openflow, DATA: $store_serialised"                                     


logger -t vif-openflow "Status: ALL Done,  ACT: All tasks, RULE: ovs-openflow"                


###  \\ MAIN RUN //  ###





###########  DEV


#ovs-ofctl add-flow br0 \
#    "table=2 actions=learn(table=10, NXM_OF_VLAN_TCI[0..11], \
#NXM_OF_ETH_DST[]=NXM_OF_ETH_SRC[], \
#	load:NXM_OF_IN_PORT[]->NXM_NX_REG0[0..15]), \
#	resubmit(,3)"