#!/bin/bash
#============================================================================
# ${XEN_SCRIPT_DIR}/vif-ovs
#
# Script for configuring a vif in ovsd mode.
# The hotplugging system will call this script if it is specified either in
# the device configuration given to Xend, or the default Xend configuration
# in ${XEN_CONFIG_DIR}/xend-config.sxp.  If the script is specified in
# neither of those places, then this script is the default.
#
# Usage:
# vif-ovs (add|remove|online|offline)
#
# Environment vars:
# vif         vif interface name (required).
# XENBUS_PATH path to this device's details in the XenStore (required).
#
# Read from the store:
# ovs  ovs to add the vif to (optional).  Defaults to searching for the
#         ovs itself.
# ip      list of IP networks for the vif, space-separated (optional).
#
# up:
# Enslaves the vif interface to the ovs and adds iptables rules
# for its ip addresses (if any).
#
# down:
# Removes the vif interface from the ovs and removes the iptables
# rules for its ip addresses (if any).
#============================================================================

dir=$(dirname "$0")
. "$dir/vif-common.sh"

mac=$(xenstore_read_default "$XENBUS_PATH/mac" "")
if [ -z "$mac" ]
then
    log debug "No device details in $XENBUS_PATH, exiting."
    exit 0
fi

net=${net:-}
net=$(xenstore_read_default "$XENBUS_PATH/bridge" "$vlan")

# HVM device
if [[ $dev =~ "emu" ]]; then
	logger -t xen-vif "QEMU device"            
	exit 0
fi
#

#VARIABLES
declare -A store
arr=(${net//---/ }) 

for pairs in ${arr[*]}; do
    pre_parse=(${pairs//::/ })
    store[${pre_parse[0]}]=${pre_parse[1]}
done

store[command]=$command
store[dev]=$dev
store[port]=`echo $dev|sed -e "s/vif//" -e "s/\.//"`
store[if_num]=`echo $dev|sed -e "s/vif//"|cut -d "." -f 2`
store[mac]=`echo $mac|tr '[a-z]' '[A-Z]'`
store[mac_low]=`echo $mac|tr '[A-Z]' '[a-z]'`
store[domid]=`echo $dev|cut -d "." -f 1|sed "s/vif//"`
store[fqdn]=`xenstore-read  /local/domain/${store[domid]}/name`

for i in `echo "${store[mac]}"|cut -d: -f3-|tr : ' '`; do
        [ -n "$ip" ] && ip=$ip.
        if [[ $i == 00 ]]; then
            c=0
        else
            let c=0x$i
        fi
        ip=${ip}$c
done

store[ip]=$ip

# INIT COMMON VARS
store[ovs_tag_method]="tag"
netmask_hex=`echo ${store[mac]} |cut -d":" -f2`
store[netmask]=`echo $((16#$netmask_hex))`
store[bcast]=`ipcalc -b ${store[ip]}/${store[netmask]}|grep Broadcast:|awk '{sub(/^[ \t]+/, ""); print$2}'`
#

#TAGGED MODE SETTINGS
if [[ ${store[type]} =~ "TAGGED" ]]; then
    store[ovs_tag_method]="trunks"
    store[cookie]=`echo ${store[cookie]}|sed "s/_/,/"`
fi
#

sleep 1

for pairs in ${!store[@]}; do store_preserialised+="Key \"$pairs\" = ${store[$pairs]} ; "; done

logger -t xen-vif "PRE ->> $store_preserialised"

case "$command" in

    online|add)
        ip link set "${store[dev]}" up
        logger -t xen-vif "Status: Done,  ACT: link set ${store[dev]} up, RULE: vif-ovs"
        ip link set ${store[dev]} mtu ${store[mtu]}
        logger -t xen-vif "Status: Done,  ACT: ip link set ${store[dev]} mtu ${store[mtu]}, RULE: vif-ovs"     
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/ip ${store[ip]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/netmask ${store[netmask]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/mtu ${store[mtu]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/cookie ${store[cookie]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/switch ${store[switch]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/policy ${store[policy]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/gate ${store[gate]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/mac ${store[mac]}
        xenstore-write /local/domain/${store[domid]}/in4/net/${store[if_num]}/mac_low ${store[mac_low]}

        
        sleep 1
        
        logger -t xen-vif "Status: Ready to, ACT: ovs-vsctl add-port , RULE: vif-ovs, DATA: $store_preserialised"                
        ovs-vsctl --timeout=30 -- --if-exists del-port ${store[dev]} -- add-port ${store[switch]} "${store[dev]}" "${store[ovs_tag_method]}=${store[cookie]}" -- set interface ${store[dev]} ofport_request=${store[port]} options:type=${store[type]} options:port=${store[port]} options:mac=${store[mac]} options:ip=${store[ip]} options:fqdn=${store[fqdn]} options:mtu=${store[mtu]} options:policy=${store[policy]} options:gate=${store[gate]}
        logger -t xen-vif "Status: Done, ACT: ovs-vsctl add-port , RULE: vif-ovs, DATA: $store_preserialised"                        
        
        sleep 1
        
        store[dev_id]=`echo ${store[dev]}|cut -d"." -f 2`    
        
        for pairs in ${!store[@]}; do store_serialised+="$pairs::${store[$pairs]}---"; done 
        store_serialised=${store_serialised:0:-3}
        

        logger -t xen-vif "Status: Ready to, ACT: /etc/xen/scripts/ovs-openflow ${store[command]}, RULE: vif-ovs, DATA: $store_serialised"                        
        /etc/xen/scripts/ovs-openflow "$store_serialised" 2>&1 | logger -t xen-vif
        logger -t xen-vif "Status: Done, ACT: /etc/xen/scripts/ovs-openflow ${store[command]}, RULE: vif-ovs, DATA: $store_serialised"                        
        ;;

    offline)
        for pairs in ${!store[@]}; do store_serialised+="$pairs::${store[$pairs]}---"; done   
        store_serialised=${store_serialised:0:-3}

        logger -t xen-vif "Status: Ready to, ACT: /etc/xen/scripts/ovs-openflow ${store[command]}, RULE: vif-ovs, DATA: $store_serialised"                        
        /etc/xen/scripts/ovs-openflow "$store_serialised" 2>&1 | logger -t xen-vif
        logger -t xen-vif "Status: Done, ACT: /etc/xen/scripts/ovs-openflow ${store[command]}, RULE: vif-ovs, DATA: $store_serialised"                        
        sleep 1
        ovs-vsctl del-port ${store[switch]} "${store[dev]}"
        logger -t xen-vif "Status: Done,  ACT: ovs-vsctl del-port ${store[switch]} ${store[dev]}, RULE: vif-ovs"        
        sleep 1
        do_without_error ip link set "${store[dev]}" down
        logger -t xen-vif "Status: Done,  ACT: ip link set ${store[dev]} down, RULE: vif-ovs"                
        ;;
esac

        logger -t xen-vif "Status: ALL Done,  ACT: All tasks, RULE: vif-ovs"                

if [ "$type_if" = vif -a "$command" = "online" ]
then
  success
fi

#MISC
#search ofport - `ovs-vsctl find interface name=${store[dev]}|grep ofport." "|awk  '{print $3}'`
